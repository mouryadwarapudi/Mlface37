''''
Real Time Face Recogition
	==> Each face stored on dataset/ dir, should have a unique numeric integer ID as 1, 2, 3, etc                       
	==> LBPH computed model (trained faces) should be on trainer/ dir
Based on original code by Anirban Kar: https://github.com/thecodacus/Face-Recognition    

Developed by Marcelo Rovai - MJRoBot.org @ 21Feb18  

'''

import cv2
#import numpy as np
#import os

import requests
import numpy as np
import imutils 

recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('C:\\Users\\user\\Desktop\\desktop\\trainer\\trainer.yml')
cascadePath = "C:\\Users\\user\\Desktop\\haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath);

font = cv2.FONT_HERSHEY_SIMPLEX

#iniciate id counter
Id = 0
ym = 0

# names related to ids: example ==> Marcelo: id=1,  etc
names = ['None', 'Mourya', 'Kumari', 'a','b','Mourya', 'Z', 'W'] 

# Initialize and start realtime video capture
#cam = cv2.VideoCapture(0)
#cam.set(3, 1920) # set video widht
#cam.set(4, 1080) # set video height

url = "http://192.168.0.5:8080/shot.jpg"

# Define min window size to be recognized as a face
#minW = 0.1*cam.get(3)
#minH = 0.1*cam.get(4)

while True:

    img_resp = requests.get(url)
    img_arr = np.array(bytearray(img_resp.content), dtype=np.uint8)
    img = cv2.imdecode(img_arr, -1)
    img = imutils.resize(img, width=1000, height=1800)
   # img = cv2.flip(img, -1) # Flip vertically

    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

    faces = faceCascade.detectMultiScale( 
        gray,
        scaleFactor = 1.2,
        minNeighbors = 5,
        #minSize = (int(minW), int(minH)),
       )

    for(x,y,w,h) in faces:

        cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)

        Id, confidence = recognizer.predict(gray[y:y+h,x:x+w])
        
        ym=Id

        # Check if confidence is less them 100 ==> "0" is perfect match 
        if (confidence < 100):
            
            Id = names[Id]
            confidence = "  {0}%".format(round(100 - confidence))
        
        else:
            Id = "unknown"
            confidence = "  {0}%".format(round(100 - confidence))
        
        cv2.putText(img, str(Id), (x+5,y-5), font, 1, (255,255,255), 2)
        cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  
        
    cv2.imshow('camera',img) 
    
    k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
    if k == 27:
        break

# Do a bit of cleanup
print(str(Id),str(ym))
print("\n [INFO] Exiting Program and cleanup stuff")

#cam.release()
cv2.destroyAllWindows()
